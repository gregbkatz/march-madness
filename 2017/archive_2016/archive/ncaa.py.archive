#!/usr/bin/env python

import csv
from scipy.special import erfinv, erf
from random import uniform
from statistics import median 
import glob, os
from scipy.stats import rankdata 
import numpy as np
import urllib.request

def yahoo_html_region(picks):
    return [picks[0:8], picks[8:12], picks[12:14]]

def calc_win_prob(game):
    diff = game['team1']['team_rating'] - game['team2']['team_rating']
    return 0.5*(1+erf(diff/10/2**0.5))

def team_summary(team):
#    return '{:5} {:8} {:12}'.format(team['team_seed'], team['team_region'], team['team_name'][0:12])
    return '{:8} {:12}'.format(team['team_seed'], team['team_name'][0:12])

def game_summary(game):
    team1 = game['team1']
    team2 = game['team2']
    out1 = team_summary(team1)
    out2 = team_summary(team2)
    
#    if 'p_win' in game:
#        out1 = '{:6.2f} {}'.format(game['p_win'], out1)
#        out2 = '{:6.2f} {}'.format(1-game['p_win'], out2)
    if 'result' in game:
        if game['result']:
#            out1 = 'L ' + out1
#            out2 = 'W ' + out2
            out = out2
        else:
#            out1 = 'W ' + out1
#            out2 = 'L ' + out2
            out = out1
    
#    out = '{} vs {}'.format(out1, out2)
   
#    if 'seed_diff' in game:
#        out = '{} '.format(game['seed_diff']) + out

    if 'win_id' in game:
        out = '{} '.format(game['win_id']) + out
    
    return out

def round_summary(rd):
    out = ''
    for game in rd:
        out = out + game_summary(game) + '\n'
    return out

def bracket_summary(bracket):
    out = ''
    i = 1
    for rd in bracket:
        out = out + '\n------------------------------ Round {} -----------------------------------\n'.format(i)
        out = out + round_summary(rd)
        out = out + '\n'
        i += 1
    return out

def champion_summary(brackets):
    idx = len(brackets[0]) - 1
    out = ''
    for bracket in brackets:
        out = out + round_summary(bracket[idx])
    return out


def sort_region(region):
    return [region[0], region[7], region[4], region[3], region[5], region[2], region[6], region[1]]

def resolve_game(game, sample):
# returns index of winning team
# sample must be between 0 and 1
# For monte carlo, sample should be uniformly distributed
# For favorite to win use 1
# For higher rated to win use 0.5
    if sample <= game['p_win']:
        return 0 # first team wins
    else:
        return 1 # second team wins

def resolve_round(games):
    i = 0
    for game in games:
        games[i]['p_win'] = calc_win_prob(game)
        games[i]['result'] = resolve_game(game, uniform(0,1))
        if games[i]['result']:
            games[i]['win_id'] = games[i]['team2']['team_id']
            games[i]['seed_diff'] = games[i]['team2']['team_seed'] - games[i]['team1']['team_seed']
        else:
            games[i]['win_id'] = games[i]['team1']['team_id']
            games[i]['seed_diff'] = games[i]['team1']['team_seed'] - games[i]['team2']['team_seed']
        i = i+1
    return games

def new_round(last_round):
    games = []
    skip = True
    last_team = {}
    for game in last_round:
        if game['result']:
            team = game['team2']
        else:
            team = game['team1']
        if skip:
            skip = False
        else:
            games.append({"team1":last_team, "team2":team}) 
            skip = True

        last_team = team
    return games

   
def resolve_bracket(games):
    bracket = [games]
    i = 0
    while True:
        bracket[i] = resolve_round(bracket[i])
        if len(bracket[i]) <= 1:
            break
        bracket.append(new_round(bracket[i]))
        i = i+1 
               
    return bracket 

def compare_picks_to_bracket(pick_ids, bracket):
    i = 0
    check = []
    for rd in pick_ids:
        j = 0
        check.append([])
#        print('-----')
        for pick_id in rd:
#            print('{} {}'.format(bracket[i][j]['win_id'], pick_id))
            check[i].append(bracket[i][j]['win_id'] == pick_id)
            j += 1
        i += 1
    return check

def score_bracket(check, bracket):
    i = 0
    bonus_multiplier = [1,1,2,2,3,3]
    score_by_round = []
    bonus_by_round = []
    score_by_game = []
    bonus_by_game = []
    for rd in check:
        j = 0
        score_by_game.append([])
        bonus_by_game.append([])
        for game in rd:
            score_by_game[i].append(game*2**i)
            temp_bonus = game*bracket[i][j]['seed_diff']*bonus_multiplier[i]
            bonus_by_game[i].append(max(0,temp_bonus))
            j += 1
        score_by_round.append(sum(score_by_game[i]))
        bonus_by_round.append(sum(bonus_by_game[i]))
        i += 1
    score = sum(score_by_round)
    bonus = sum(bonus_by_round)
    total = score + bonus
#    return (score, score_by_round, score_by_game, bonus, bonus_by_round, bonus_by_game, total)
    return total            

def pick_id_to_name_lines(pick_ids, forecast):
    i = 1
    out = ''
    s = []
    for rd in pick_ids:
        out += '----- Round {} -----\n'.format(i)
        i += 1
        for team in rd:
#           out = out + (team_summary(forecast.teams[team])) + '\n'
            s.append(team_summary(forecast.teams[team]))
#    return out
    return s

class Compete:
    def __init__(self, d, source='dir'):
        picks = []
        names = []
        if source == 'dir':
            for file in os.listdir(d):
                if file.endswith(".picks"):
                    picks.append(Picks(os.path.join(d, file), True))
                    names.append(file)
        elif source == 'yahoo':
            entries = parse_members_table(d)
            self.entries = entries            
        for entry in entries:
                url = 'https://tournament.fantasysports.yahoo.com/t1/' + entry
                print('{} {}'.format(entry, entries[entry]))
                picks.append(Picks(url))
                names.append(entries[entry])
        self.picks = picks        
        self.names = names

def yahoo_sort_teams(teams):
    South = yahoo_html_region(teams[0:])
    West = yahoo_html_region(teams[14:])
    East  = yahoo_html_region(teams[35:])
    Midwest = yahoo_html_region(teams[49:])
    x = []
    for i in range(len(South)):
        x.append(South[i] + West[i] + East[i] + Midwest[i])
    x.append(teams[28:32])
    x.append(teams[32:34])
    x.append(teams[34:35])
    return x

def yahoo_parse_line(line):
    a = line.split('user-pick">')
    b = a[1].split('</em>')
    c = b[1].split('</b>')
    return c[0]

def parse_yahoo_group(group):
    url = 'https://tournament.fantasysports.yahoo.com/t1/group/' + str(group)
    response = urllib.request.urlopen(url)
    f = open('tmp', 'wt')
    s = []
    for linebyte in response:
        line = str(linebyte)
        f.write(line + '\n') 
        if line.find('members_table') > 0:
            s.append(line)
    f.close()
    return(s)

def parse_members_table(fname):
    with open(fname, 'r') as f:
        s = f.readline()
        a = s.split('href')
        entries = {}
        for entry in a:
            if entry[0:6] == '="/t1/':
                b = entry.split('>')
                name = b[1][0:-3]
                c = b[0].split('"')
                key = c[1][4:]
                entries[key] = name                
    return entries
     
class SearchPicks:
    def __init__(self, f1, f2, ncases, npicks):
        self.forecast = Forecast(f1)
        self.pick_forecast = Forecast(f2)
        self.ncases = ncases
#        brackets = []
#        for i in range(0,ncases):
#            brackets.append(resolve_bracket(self.forecast.first_games))
#
#        pick_brackets = []
#        scores = []
#        medians = []
#        for i in range(0,npicks):
#            pick_brackets.append(RandomPicks(self.pick_forecast))
#            scores.append([])
#            for bracket in brackets:
#                check = compare_picks_to_bracket(pick_brackets[i].pick_ids, bracket)
#                scores[i].append(score_bracket(check, bracket))
#            medians.append(median(scores[i])) 
#            print(npicks-i)
#
#        self.brackets = brackets
#        self.pick_brackets = pick_brackets
#        self.scores = scores
#        self.grade = medians
#        self.print_top_bottom(1) 

        pick_brackets = []
        medians = []
        for i in range(0,npicks):
            pick_bracket = RandomPicks(self.pick_forecast)
            mc = MC(pick_bracket, self.forecast)
            mc.run_MC(ncases)
            medians.append(median(mc.scores))
            pick_brackets.append(pick_bracket)
            print(npicks - i)
        self.grade = medians
        self.pick_brackets = pick_brackets
        self.print_top_bottom(3) 

    def print_top_bottom(self, n):
        idx_sort = sorted(range(len(self.grade)), key=lambda k: self.grade[k])
        self.idx_sort = idx_sort
        for i in range(0,n):
           with open('top{}'.format(i+1), 'wt') as f:
                j = idx_sort[-i-1]
                f.write('{}\n'.format(self.grade[j]))
                f.write(pick_id_to_names(self.pick_brackets[j].pick_ids, self.forecast))
           with open('bottom{}'.format(i+1), 'wt') as f:
                j = idx_sort[i]
                f.write('{}\n'.format(self.grade[j]))
                f.write(pick_id_to_names(self.pick_brackets[j].pick_ids, self.forecast))

    def correlate(self,  i_rd, i_game):
        ids = []
        ratings = []
        seeds = []
        for bracket in self.pick_brackets:
            curr_id = bracket.pick_ids[i_rd][i_game]
            ids.append(curr_id)
            team = self.forecast.teams[curr_id]
            ratings.append(team['team_rating'])
            seeds.append(team['team_seed'])
        return (ids, ratings, seeds)


class RandomPicks:
    def __init__(self, forecast):
#        self.forecast = Forecast(f) 
        self.forecast = forecast
        picks_as_bracket = resolve_bracket(self.forecast.first_games)
        pick_ids = []
        i = 0
        for rd in picks_as_bracket:
            pick_ids.append([])
            j = 0
            for game in rd:
                pick_ids[i].append(picks_as_bracket[i][j]['win_id'])
                j += 1
            i += 1
        self.pick_ids = pick_ids
#        self.mc = MC(self, self.forecast)
#        self.mc.run_MC(100)
        
class MCcompete:
    def __init__(self, picks, forecast):
        self.forecast = forecast
        self.picks = picks
    
        j = 0
        for j in range(len(self.picks)):
            if not hasattr(self.picks[j], 'pick_ids'):
                self.picks[j].convert_picks_to_id(self.forecast.idmap, self.forecast.synonyms) 


    def run_MC(self, ncases):
        brackets = []
        scores = np.zeros((ncases, len(self.picks)))
        ranks = np.zeros((ncases, len(self.picks)))
        bracket_arrays = []
        for i in range(0, ncases): # case
            bracket = resolve_bracket(self.forecast.first_games)
            brackets.append(bracket)
            for j in range(0,len(bracket)): # round
                if i == 0: # first cas
                    bracket_arrays.append(np.zeros((ncases,len(bracket[j]))))
                for k in range(0, len(bracket[j])): # game
                    bracket_arrays[j][i,k] = bracket[j][k]['win_id']

            for j in range(0, len(self.picks)):
                check = compare_picks_to_bracket(self.picks[j].pick_ids, bracket)
                scores[i,j] = score_bracket(check, bracket)
                       
            ranks[i,:] = rankdata(scores[i,:], 'min')

        self.brackets = brackets
        self.bracket_arrays = bracket_arrays
        self.scores = scores 
        self.ranks = ranks 
        self.ncases = ncases

    def analyze_brackets(self):
        teams = self.forecast.teams
        for team_id in teams:
            team = teams[team_id]
            print(team_summary(team))

class MC:
    def __init__(self, picks, forecast):
        self.forecast = forecast
        self.picks = picks
        if not hasattr(self.picks, 'pick_ids'):
            self.picks.convert_picks_to_id(self.forecast.idmap, self.forecast.synonyms) 


    def run_MC(self, ncases):
        brackets = []
        checks = []
        scores = []
        for i in range(0, ncases):
            bracket = resolve_bracket(self.forecast.first_games)
            check = compare_picks_to_bracket(self.picks.pick_ids, bracket)
            score = score_bracket(check, bracket)
            brackets.append(bracket)
            checks.append(check)
            scores.append(score)
                       
        self.brackets = brackets
        self.checks = checks
        self.scores = scores 
        self.ncases = ncases


class Picks:
    def __init__(self, fname, alt = False):
        teams = []
        if fname[0:4] == 'http':
            response = urllib.request.urlopen(fname)
            for linebyte in response:
                line = str(linebyte)
                if line.find('user-pick') > 0:
                    if line.find('Real Winner') == -1 and line.find('None') == -1:
                        teams.append(yahoo_parse_line(line)) 
            picks = yahoo_sort_teams(teams)
            self.picks = picks
            self.teams = teams

        else:   
            if alt:
                self.read_picks_alt(fname)
            else:
                self.read_picks(fname)
   
   
    def read_picks_alt(self,fname):
        picks = []
        i = -1
        with open(fname, 'r') as f:
            f.readline() # skip first line
            for line in f:
                if line[0] == '-':
                    picks.append([])
                    i += 1
                else:
                    words = line.split()
                    picks[i].append(' '.join(words[1:]))
                       
        self.picks = picks 
 
    def read_picks(self,fname):
        picks = []
        with open(fname, 'r') as f:
            reader = csv.reader(f)
            header = []
            for row in reader:
                if not header:
                    header = row
                    for col in header:
                        picks.append([])
                else:
                    i = 0
                    for col in row:
                        if col:
                            picks[i].append(col)
                        i += 1
        self.picks = picks
        
    def convert_picks_to_id(self, idmap, synonyms={}):
        pick_ids = [] 
        i = 0
        for rd in self.picks:
            pick_ids.append([])
            for pick in rd:
                pick = pick.lower().strip()
                if pick in synonyms:
                    pick = synonyms[pick]
                if pick in idmap:
                    pick_ids[i].append(idmap[pick])
                else:
                    print('Pick {} not found in forecast bracket'.format(pick)) 
            i += 1
        self.pick_ids = pick_ids
                
class Forecast:
    def __init__(self, fname):
        self.get_synonyms()
        self.read_forecast(fname)
        self.make_name_to_id_lookup()
        self.hardcode_first_round() 
        self.find_first_games()
#        self.check_fit()
        self.sort_first_games()
#        self.rd1 = resolve_round(self.first_games)
#        self.rd2 = new_round(self.rd1)
#        self.bracket = resolve_bracket(self.first_games)

    def write_first_round_to_file(self, fname='first_round.csv'):
        with open(fname, 'wt') as f:
            for game in self.first_games:
                f.write(game['team1']['team_name'] + '\n')
                f.write(game['team2']['team_name'] + '\n')
    
    def sort_first_games(self):
        m = self.first_games
        mp = sorted(m, key=lambda k:k['team1']['team_seed'])
        mpp = sorted(mp, key=lambda k:k['team1']['team_region'])
        East = sort_region(mpp[0:8])
        Midwest = sort_region(mpp[8:16])
        South = sort_region(mpp[16:24])
        West = sort_region(mpp[24:32])
         
        self.first_games = South + West + East + Midwest     


    def hardcode_first_round(self):
        self.teams.pop(238)
        self.teams.pop(202)
        self.teams.pop(161)
        self.teams.pop(2582)
        for team in self.teams:
            if team == 130 or team == 2724 or team == 526 or team == 107:
                self.teams[team]['team_seed'] = float(self.teams[team]['team_seed'][0:2])
                self.teams[team]['playin_flag'] = 0

    def check_fit(self):
        games = self.first_games
        i = 0
        for game in games:
            diff = game['team1']['team_rating'] - game['team2']['team_rating']
            p_win = game['team1']['rd2_win']

            nsigma = 2**0.5*erfinv(2*p_win-1)
            sigma = diff/nsigma
            est = 0.5*(1+erf(diff/10/2**0.5))
            error = est - p_win 

            games[i]['diff'] = diff
            games[i]['nsigma'] = nsigma
            games[i]['sigma'] = sigma
            games[i]['est'] = est
            games[i]['error'] = error

            i = i + 1
        self.first_games = games

    def find_first_games(self):
        teams = self.teams
        games = []
        for teamid in teams:
            team = teams[teamid]
            if team['playin_flag']:
               print(team['team_name'])
            else:
                if team['team_seed'] <= 8:
                    for teamid2 in teams:
                        team2 = teams[teamid2]
                        if team2['team_region'] == team['team_region']:
                            if not team2['playin_flag']:
                                if team['team_seed'] + team2['team_seed'] == 17:
                                    games.append({"team1":team, "team2":team2}) 
        self.first_games = games

    def read_forecast(self, fname):
        teams = {}
        with open(fname, 'r') as f:
            reader = csv.reader(f, delimiter=',')
            header = []
            for row in reader:
                if not header:
                    header = row
                else:
                    if row[0] == 'mens':
                        curr_id = int(row[11])
                        teams[curr_id] = {}
                        i = 0
                        for field in row:
                            try:
                                curr = float(field)
                            except:
                                curr = field
                            teams[curr_id][header[i]] = curr
                            i = i + 1
        self.teams = teams

    def make_name_to_id_lookup(self):
        self.idmap = {}
        for teamid in self.teams:
            team = self.teams[teamid]
            self.idmap[team['team_name'].lower()] = team['team_id']
        
    
    def get_synonyms(self):
        s = {'cal': 'california', 
             'wichita st.': 'wichita state',
             'miami': 'miami (fl)', 
             "saint joe's": "saint joseph's",
             'unc': 'north carolina',
             'usc': 'southern california',
             'uva': 'virginia',
             'uconn': 'connecticut',
             's. dakota st.': 'south dakota state',
             'unc-wilm.': 'north carolina-wilmington',
             'n. iowa': 'northern iowa',
             'vcu': 'virginia commonwealth',
             'chatt.': 'chattanooga',
             'w. virginia': 'west virginia',
             'ark.-lr': 'arkansas-little rock',
             'virginia com': 'virginia commonwealth',
             'north caroli': 'north carolina',
             'west virgini': 'west virginia',
             'michigan sta': 'michigan state',
             'south dakota': 'south dakota state',
             'wichita stat': 'wichita state',
             'northern iow': 'northern iowa',
             'stephen f. a': 'stephen f. austin',
             'arkansas-lit': 'arkansas-little rock',
             'southern cal': 'southern california',
             'florida gulf': 'florida gulf coast',
             'n. c. wilmington': 'north carolina-wilmington',
             'fresno st.': 'fresno state',
             'n. carolina': 'north carolina',
             'ar little rock': 'arkansas-little rock',
             'iowa st.': 'iowa state',
             'michigan st.': 'michigan state',
             'sf austin': 'stephen f. austin',
             'wichita st': 'wichita state',
             'n carolina': 'north carolina',
             'michigan st': 'michigan state',
             'oregon st.': 'oregon state',
             'n.c. wilmington': 'north carolina-wilmington',
             's.f. austin': 'stephen f. austin',
             "st. joseph\\'s": "saint joseph's",
             "saint joseph": "saint joseph's"}

 
        self.synonyms = s 

